# 来源的host
set $origin_host "";
# is_cors 是否跨域
set $is_cors "false";
# cors_type 其他跨域类型
set $cors_type "others";

# 得到来源的host
if ($http_origin ~* ^https?://([a-zA-Z0-9\-\.]+)) {
    set $origin_host $1;
}

# 判断是否是指定域名（白名单）
if ($origin_host ~* ^([a-zA-Z0-9\-]+\.)*igame\.[a-zA-Z0-9\-]\.com$) {
    set $is_cors "true";
}

# 判断是否跨域，注意此处只做了简单的域名判断，并未对协议和端口进行判断
# 协议和端口由前端自己保证一致，不一致导致的跨域失败，前端自己处理
if ($origin_host = $host) {
    # cors_type 设置为空 代表未跨域
    set $is_cors "false";
}

# 判断是否是preflight请求
if ($request_method = "OPTIONS") {
    set $cors_type "options";
}

# 确定最终跨域类型，非跨域的时候，跨域类型设置为空
if ($is_cors = "false") {
    set $cors_type "";
}

# 真正的preflight请求
if ($cors_type = "options") {
    # 允许来源
    add_header "Access-Control-Allow-Origin" "$http_origin";
    # 允许方法
    add_header "Access-Control-Allow-Methods" "$http_access_control_request_method";
    # 允许自定义的头
    add_header "Access-Control-Allow-Headers" "$http_access_control_request_headers";
    # 支持cookie
    add_header "Access-Control-Allow-Credentials" "true";
    # preflight的有效期，单位秒，测试环境不需要缓存
    add_header "Access-Control-Max-Age" "0";
    # 返回内容类型
    add_header "Content-Type" "text/plain charset=UTF-8";
    # 返回内容长度
    add_header "Content-Length" 0;
    # 无内容返回状态码
    return 204;
}

# 真正的跨域请求
if ($cors_type = "others") {
    # 允许来源
    add_header "Access-Control-Allow-Origin" "$http_origin";
    # 允许前端xhr对象能获取到的头信息，不设置则只能获取六个基本头信息
    add_header "Access-Control-Expose-Headers" "Date,Content-Encoding,Vary,Server,Transfer-Encoding,Connection";
    # 允许cookie
    add_header "Access-Control-Allow-Credentials" "true";
}
